////////////////////////////////////////////////////////////////////////////////////////////////////
// Файл для предупреждений во время выполнения. Позволяет писать свои строки для сообщений.       //
// Доступно только в Debug-версии, т.е. с ключом DEBUG.                                           //
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once

#ifdef _WIN32
#include <windows.h>
////////////////////////////////////////////////////////////////////////////////////////////////////
//  Выводит MessageBox с текстом ошибки.                                                          //
////////////////////////////////////////////////////////////////////////////////////////////////////
__forceinline void ShowMessageBox(const char *errMsg)
{
	char errTitle[MAX_PATH];
	GetModuleFileNameA( NULL, errTitle, _countof(errTitle) );
	MessageBoxA( GetActiveWindow(), errMsg, errTitle, MB_OK );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//  Вызов MessageBox и прерывание программы.                                                      //
////////////////////////////////////////////////////////////////////////////////////////////////////
__forceinline void SetFail( const char *errMsg )
{
	ShowMessageBox( errMsg );
    __debugbreak();
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//  Вывод окна о невыполнении условия.                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////////
__forceinline void AssertFailWin( const char *file, int line, const char *expr )
{
	char err[2*MAX_PATH];
	wsprintfA( err, "File %s, line %d.\n%s", file, line, expr );
	SetFail( err );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
#else // _WIN32
#include <stdlib.h>
////////////////////////////////////////////////////////////////////////////////////////////////////
inline void AssertFailMac( const char *file, int line, const char *expr )
{
	abort();
}
////////////////////////////////////////////////////////////////////////////////////////////////////
#endif // _WIN32


////////////////////////////////////////////////////////////////////////////////////////////////////
// Реализация общей функции ASSERT'а.															  //
////////////////////////////////////////////////////////////////////////////////////////////////////
inline void AssertFailCommon( const char *file, int line, const char *expr )
{
#ifdef _WIN32
	AssertFailWin( file, line, expr );
#else // _WIN32
	AssertFailMac( file, line, expr );
#endif // _WIN32
}





////////////////////////////////////////////////////////////////////////////////////////////////////
//  Макрос ASSERT.                                                                                //
//  В отладочном режиме выводим окно, если условие не выполнено.                                  //
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef DEBUG
#define ASSERT(x,y) if (!(x)) AssertFailCommon( __FILE__, __LINE__, #y" : "#x )
#else
#define ASSERT(x,y)
#endif


////////////////////////////////////////////////////////////////////////////////////////////////////
//  Макрос CHECK.                                                                                 //
//  В отладочной версии подобен ASSERT, в релизной версии выполняетсья какая-либо операция.       //
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef DEBUG
#define CHECK(x,y,z) if (!(x)) { AssertFailCommon( __FILE__, __LINE__, #y" : "#x ); z; }
#else
#define CHECK(x,y,z) if (!(x)) z
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Макрос BREAK.                                                                                 //
//  В отладочном режиме выводим окно в любом случае.                                              //
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef DEBUG
#define BREAK(x) AssertFailCommon( __FILE__, __LINE__, #x )
#else
#define BREAK(x)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
// Макрос VERIFY.                                                                                 //
// В отладочном режиме выводим окно в слуачае, если результат выполнения чего-либо false, а в     //
// релизной сборке выполняем эту операцию.                                                        //
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifdef DEBUG
#define VERIFY(x) ASSERT(x, "VERIFY macros. Something wrong" )
#else
#define VERIFY(x) x
#endif
