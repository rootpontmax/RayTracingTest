#include "Vec3.h"
#include <cmath>

////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3& Vec3::operator=( const Vec3& rhs )
{
    if( &rhs == this )
        return *this;
    
    x = rhs.x;
    y = rhs.y;
    z = rhs.z;
    
    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3& Vec3::operator*=( float rhs )
{
    x *= rhs;
    y *= rhs;
    z *= rhs;
    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3& Vec3::operator/=( float rhs )
{
    x /= rhs;
    y /= rhs;
    z /= rhs;
    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3& Vec3::operator-=( const Vec3& rhs )
{
    x -= rhs.x;
    y -= rhs.y;
    z -= rhs.z;
    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3& Vec3::operator+=( const Vec3& rhs )
{
    x += rhs.x;
    y += rhs.y;
    z += rhs.z;
    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3& Vec3::operator*=( const Vec3& rhs )
{
    x *= rhs.x;
    y *= rhs.y;
    z *= rhs.z;
    return *this;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 Vec3::operator-() const
{
    Vec3 ret( -x, -y, -z );
    return ret;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
float Vec3::Length() const
{
    const float product = x * x + y * y + z * z;
    return sqrt( product );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
float Vec3::LengthSqr() const
{
    const float product = x * x + y * y + z * z;
    return product;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator*( const Vec3& lhs, float rhs )
{
    return Vec3( lhs.x * rhs, lhs.y * rhs, lhs.z * rhs );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator*( float lhs, const Vec3& rhs )
{
    return Vec3( lhs * rhs.x, lhs * rhs.y, lhs * rhs.z );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator/( const Vec3& lhs, float rhs )
{
    return Vec3( lhs.x / rhs, lhs.y / rhs, lhs.z / rhs );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator*( const Vec3& lhs, const Vec3& rhs )
{
    return Vec3( lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator+( const Vec3& lhs, const Vec3& rhs )
{
    return Vec3( lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator+( const Vec3& lhs, const float rhs )
{
    return Vec3( lhs.x + rhs, lhs.y + rhs, lhs.z + rhs );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator-( const Vec3& lhs, const Vec3& rhs )
{
    return Vec3( lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
Vec3 operator-( const Vec3& lhs, const float rhs )
{
    return Vec3( lhs.x - rhs, lhs.y - rhs, lhs.z - rhs );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
bool operator!=( const Vec3& lhs, const Vec3& rhs )
{
    return ( ( lhs.x != rhs.x ) && ( lhs.y != rhs.y ) && ( lhs.z != rhs.z ) );
}
////////////////////////////////////////////////////////////////////////////////////////////////////
float Dot( const Vec3& lhs, const Vec3& rhs )
{
    return lhs.x * rhs.x + lhs.y * rhs.y + lhs.z * rhs.z;
}
////////////////////////////////////////////////////////////////////////////////////////////////////
